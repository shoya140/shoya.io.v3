<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shoya.io</title>
    <description></description>
    <link>http://shoya.io/</link>
    <atom:link href="http://shoya.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 01 Jan 2015 15:28:01 +0900</pubDate>
    <lastBuildDate>Thu, 01 Jan 2015 15:28:01 +0900</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>「心の脳科学」読んだ</title>
        <description>&lt;div class=&quot;babylink-box&quot; style=&quot;overflow: hidden; font-size: small; zoom: 1; margin: 15px 0; text-align: left;&quot;&gt;&lt;div class=&quot;babylink-image&quot; style=&quot;float: left; margin: 0px 15px 10px 0px; width: 75px; height: 75px; text-align: center;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4121019725/mrk1869-22/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;border-top: medium none; border-right: medium none; border-bottom: medium none; border-left: medium none;&quot; src=&quot;http://ecx.images-amazon.com/images/I/31%2BneIEVCcL._SL75_.jpg&quot; width=&quot;48&quot; height=&quot;75&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;babylink-info&quot; style=&quot;overflow: hidden; zoom: 1; line-height: 120%;&quot;&gt;&lt;div class=&quot;babylink-title&quot; style=&quot;margin-bottom: 2px; line-height: 120%;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4121019725/mrk1869-22/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;心の脳科学―「わたし」は脳から生まれる (中公新書)&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;babylink-manufacturer&quot; style=&quot;margin-bottom: 5px;&quot;&gt;坂井 克之&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;今日はT大学入学試験の初日、これから二日間が本当の戦いの始まりだ。一ヶ月間前に行われた脳構造評価では、僕の前頭葉皮質体積の偏差値は八〇、海馬体積の偏差値は七五だった。全国共通脳評価でかなり上位に入るってことは確かだけど、所詮これは脳の形や大きさの評価にすぎない。肝心の脳の働きの評価は、各大学で施行される脳機能試験で評価されるってわけだ。ここでは各大学の評価基準に基づいて問題が出題され、その解答成績だけでなく、問題を解いているときの脳活動も評価の対象となる。 &lt;cite&gt;坂井克之「心の脳科学」&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なかなか衝撃的な未来の脳社会のフィクションから始まる坂井克之著「心の脳科学」を読んだ。この本では&lt;strong&gt;脳画像研究によって解明されてきた脳の仕組み&lt;/strong&gt;を紹介し、脳のメカニズムが解明されるにしたがって浮かび上がってくる&lt;strong&gt;「わたしとは何か」という問題&lt;/strong&gt;を読者に投げかける。&lt;/p&gt;

&lt;p&gt;面白いのはこの本を読み進めているうちに「『わたし』が意識して『脳』を操作している」のか「『脳』の活動によって『わたし』という意識が存在している」のかが分からなくなっていくところ。後者が正しければ、&lt;strong&gt;脳活動の測定によって人の心を理解・操作する&lt;/strong&gt;ことができる日が来るかもしれない。脳を治療して心を良い状態に保ったり、筆記テストに変わる知力の測定方法が生まれたり、脳の診断から潜在的な犯罪傾向を測定したり。同時に治療者や社会という名のもとに個人の心や思考が操作されてしまう危険性もある。&lt;/p&gt;

&lt;p&gt;一方で脳の研究というと(上記のような)可能性や怖さが人目を惹く傾向にあり、脳科学の進歩によってどんなことができないと明らかになったかについて目を向ける人は少ない。僕たちは予備知識を身につけて、安易な情報に流されず自身の未来を選択しなければならない。その点において、この本は脳機能の解明を目的とする多くの研究を&lt;strong&gt;明確な引用&lt;/strong&gt;とともに紹介しているのが良い。研究から導かれた結果のすぐ後ろに著者名を書き、章の終わりには参考文献として引用元の論文を記してある。ここを起点に興味のある研究を掘り下げていくことができる。脳科学の入門書として最適な一冊だと思う。&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Dec 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/brain-science-for-the-mind/</link>
        <guid isPermaLink="true">http://shoya.io/blog/brain-science-for-the-mind/</guid>
        
        <category>Note</category>
        
        
        <category>coffee</category>
        
      </item>
    
      <item>
        <title>Pythonライブラリを作成してPyPIに登録する</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/dalmatian/&quot;&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/pypi01.png&quot; class=&quot;image-on-frame-medium image-fade&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Confusion Matrix(混同行列)を視覚的に描画する&lt;a href=&quot;https://pypi.python.org/pypi/dalmatian/&quot;&gt;dalmatian&lt;/a&gt;というライブラリを作成してPyPIに登録しました(&lt;a href=&quot;https://github.com/shoya140/dalmatian&quot;&gt;ソースコードはGitHubで公開&lt;/a&gt;)。パッケージの作成とPyPIへの登録、情報が少なくて苦労したので、必要なファイルと公開手順についてメモを残しておきます。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;ファイル構成&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dalmatian
├── README.md
├── dalmatian
│   ├── __init__.py
│   ├── matrix.py
│   └── test.py
├── register.py
└── setup.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;dalmatian/dalmatian/matrix.pyがモジュールの実体でtest.pyがテストファイルです。必要なファイルはsetup.pyと__init__.py。register.pyやREADME.mdは任意。&lt;/p&gt;

&lt;h3 id=&quot;setuppy&quot;&gt;setup.py&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# coding: utf-8&lt;/span&gt;

try:
    import setuptools
    from setuptools import setup, find_packages
except ImportError:
    print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Please install setuptools.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

import os
&lt;span class=&quot;nv&quot;&gt;long_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Visualizing a confusion matrix with gradations&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; os.path.exists&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;README.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;nv&quot;&gt;long_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; open&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;README.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.read&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

setup&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;dalmatian&amp;#39;&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.1.3&amp;#39;&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Visualizing a confusion matrix with gradations&amp;#39;&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;long_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; long_description,
    &lt;span class=&quot;nv&quot;&gt;license&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Shoya Ishimaru&amp;#39;&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;author_email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;shoya.ishimaru@gmail.com&amp;#39;&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://github.com/shoya140/dalmatian&amp;#39;&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;keywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;confusion matrix&amp;#39;&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;packages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; find_packages&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;install_requires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;numpy&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&amp;#39;reportlab&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;classifiers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Programming Language :: Python :: 2.7&amp;#39;&lt;/span&gt;,
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Intended Audience :: Science/Research&amp;#39;&lt;/span&gt;,
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;License :: OSI Approved :: MIT License&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上から順に説明します。ライブラリのインストールにはsetuptoolsを使用するのでimport。setuptoolsがインストールされていないときは警告を出して終了します。&lt;/p&gt;

&lt;p&gt;PyPIのWebサイトにはreStructuredTextで書いたREADMEドキュメントを表示できるところがあります。やっぱりMarkdownで書きたいので、後述するregister.pyでREADME.mdの内容を変換します。config.pyでは変換によって出力されたテキストをlong_descriptionに代入しています。&lt;cite&gt;&lt;a href=&quot;https://coderwall.com/p/qawuyq/use-markdown-readme-s-in-python-modules&quot;&gt;Use Markdown README’s in Python modules&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;setup()の中にはライブラリの名前・バージョン・ライセンス形態・依存ライブラリなどを記入します。classifiersは&lt;a href=&quot;https://pypi.python.org/pypi?%3Aaction=list_classifiers&quot;&gt;PyPIのWebサイト&lt;/a&gt;から適しているものを見つけて設定します。&lt;cite&gt;&lt;a href=&quot;http://qiita.com/futoase/items/fb7400bfa8c956336ff1&quot;&gt;今どきのPythonのライブラリ自作からPyPIへの登録&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3 id=&quot;registerpy&quot;&gt;register.py&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;import os
import pypandoc

&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; open&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;README.txt&amp;#39;&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;&amp;#39;w+&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
f.write&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pypandoc.convert&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&amp;#39;rst&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
f.close&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
os.system&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;python setup.py sdist upload&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
os.remove&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;README.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Markdownで書かれたREADME.mdをreStructuredTextに変換するスクリプトです。python setup.py sdist uploadも含めることで、python register.pyのコマンドひとつで公開までできるようにしました。&lt;/p&gt;

&lt;h3 id=&quot;initpy&quot;&gt;__init__.py&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# coding:utf-8&lt;/span&gt;

from matrix import Matrix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;モジュールの実体と同じ階層に__init__.pyという名前でファイルを作成します。中身は空でも良いのですが、ここでクラスを列挙してimportすることで、ライブラリを使用するときにLIBRARY_NAME.CLASS_NAMEの形でクラスを扱うことができるようになります。&lt;/p&gt;

&lt;h3 id=&quot;gitignore&quot;&gt;.gitignore&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;.DS_Store
*.swp
*.swo
*.pyc
*.egg-info/
dist/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ソースコードをGitHubなどで公開する場合は、パッケージ作成にともなって作られるファイルを.gitignoreに書いておくことを忘れないようにしましょう。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;公開&lt;/h3&gt;

&lt;p&gt;まず&lt;a href=&quot;https://pypi.python.org/pypi&quot;&gt;PyPI&lt;/a&gt; &amp;gt; Registerでアカウントを作成します。次に下記のコマンドを実行します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# register.pyを作成している場合&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python register.py

&lt;span class=&quot;c&quot;&gt;# 作成していない場合&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python setup.py sdist upload&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最初のアップロードではアカウント情報を入力します(.pypircに保存される)。結果出力が200でエラーがなければライブラリの公開は完了です。&lt;/p&gt;

&lt;p&gt;今日からあなたもpypi author!!&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Dec 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/pypi/</link>
        <guid isPermaLink="true">http://shoya.io/blog/pypi/</guid>
        
        <category>Programming</category>
        
        
        <category>server</category>
        
      </item>
    
      <item>
        <title>2014年振り返り</title>
        <description>&lt;p&gt;今年ももう終わりに近づいたので、2014年の良かったこと・良くなかったことの振り返りや2015年から意識したいことについて書きました。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;良かったこと&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;多くの学会に参加した。&lt;/strong&gt; 昨年参加したUbicomp2013が大勢の人の前でシステムのデモをやったり世界中の研究者と交流したり初めてヨーロッパの文化に触れる機会だったりとても思い入れのある学会だったので、今年もUbicomp2014に論文を通すことを目標にして研究を続けてきた。結果として今年も参加することができ、刺激的なフィードバックを得たり初めてアメリカを訪れるという経験ができた。また、主導で取り組んだ研究がAugmented Human2014に採択された(その頃自分はドイツ留学中だったので代理発表をお願いした)。MIRUやPRMUといった国内の研究会でもデモ発表や口頭発表を行って、同世代や少し上の世代の方々と繋がりができた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;良いものにたくさん触れた。&lt;/strong&gt; 良いものを作るという作業、AとBという2つのうち良い方を選択することの連続だと思っている。その意思決定はデータとセンスに基づいて行われるべきで、センスを磨く一番の方法は良いものに触れることだと思う。留学中はChaos Communication Congress・&lt;a href=&quot;/blog/transmediale/&quot;&gt;Transmediale&lt;/a&gt;・&lt;a href=&quot;/blog/internet_black_market/&quot;&gt;インターネット闇市&lt;/a&gt;といったお祭りに参加したり、&lt;a href=&quot;/tag/Sightseeing/&quot;&gt;いろんな国や都市を観光した&lt;/a&gt;。最近だと&lt;a href=&quot;/blog/hakuryuen/&quot;&gt;白龍園でとても綺麗な紅葉を見た&lt;/a&gt;。映画もたくさん観た。これらの経験によって自分の中での面白いとか綺麗といった感覚を研ぎ澄ますことができたと思う。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ブログ書くようになった。&lt;/strong&gt; 行った場所とか経験とか環境設定とかなんでもいいので文章にして公開してきた。これはsanographixさん(&lt;cite&gt;&lt;a href=&quot;http://memo.sanographix.net/post/69851358523&quot;&gt;なんで日記書いたほうがいいか&lt;/a&gt;&lt;/cite&gt;)やdd_otsuさん(&lt;cite&gt;&lt;a href=&quot;http://dd-otsu.tumblr.com/post/96688840406&quot;&gt;承認情報と研究日誌&lt;/a&gt;&lt;/cite&gt;)の影響で、自分の行動や思考は記録しておいて後から再利用したいと思うようになったから。Evernoteの走り書きは本当に雑な記録になりがちだけど、ブログだと最低限人に話せるレベルでまとまった文章が保証されて良い。誰かに情報を伝えるときも「この記事読んで」の一言でお互いの時間を短縮できる。あと文章は書く習慣つけてないといざ書こうと思った時にいい感じの言葉が出てこなくて困る。&lt;cite&gt;&lt;a href=&quot;http://autobiography0.blog82.fc2.com/blog-entry-79.html&quot;&gt;No.15 クリエイティビティについて - 99%のひらめき&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;運動するようになった。&lt;/strong&gt; 体力の衰えを感じるようになったので、なるべく外に出て体を動かすことを心がけた。9月頃からは時々ジムに通うようにもなって筋力をつけたり泳いだりしてる。ジム、科学的に体を鍛える話が聞けるので一人で運動するよりも面白い。夜遅くまでやっているので大学帰りに寄れるのも良い。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;進路について考えた。&lt;/strong&gt; これまで先延ばしにしてきた卒業後の進路について真剣に考えて、修士卒業後の3年間の計画を立てることができた。(このあたりは直接会った時に聞いてください。)3年で力をつけた後は、自分の適正とかその時にやりたいことを考えて、研究と開発のどちらに進むかもう一度決めようと思う。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;良くなかったこと&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;体調崩した。&lt;/strong&gt; 大学院生、こんなに忙しいとは思っていなくて、昼は講義に出席して夕方は実験と雑務、夜は論文書いて朝はレポート課題やって昼の講義へ、みたいな生活を続けていたので、めでたさが減っていくのも無理はなかった。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2015年&lt;/h3&gt;

&lt;p&gt;やりたいこともやるべきこともたくさんな1年で、全部に100%の力でコミットすることは不可能であることを痛感した。2015年は重要度や緊急度から優先順位を意識して、やるべきことをなるべく効果的に達成していきたいと思う。また、一人でできることには限りがあるので、もっと周りの人を頼ったり、作業手順やノウハウを&lt;a href=&quot;/blog/protocol/&quot;&gt;ドキュメント化&lt;/a&gt;して後輩に引き継ぎたい。あと研究室生活はオーバーワークになりがちなので、家に研究を持ち帰らないようにして意識的に余暇の時間をとりたい。&lt;/p&gt;

&lt;p&gt;2015年もどうぞよろしくお願い致します。&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Dec 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/looking-back-at-2014/</link>
        <guid isPermaLink="true">http://shoya.io/blog/looking-back-at-2014/</guid>
        
        <category>Note</category>
        
        
        <category>coffee</category>
        
      </item>
    
      <item>
        <title>ペアプログラミングを支える技術</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.adventar.org/calendars/607&quot;&gt;LiT!関西 Advent Calendar 2014&lt;/a&gt; 1日目の記事ということで、プログラミングを教える/教わるときによくやっているペアプログラミングとそれを支えるMacの便利機能について書きます。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;ペアプログラミングとは&lt;/h3&gt;

&lt;p&gt;2人が1台のPCを使ってプログラミングすることです。キーボードを操作してコードを書く人(&lt;strong&gt;ドライバー&lt;/strong&gt;)とその様子を眺める人(&lt;strong&gt;ナビゲーター&lt;/strong&gt;)の役割に分かれて交代でプログラムを書きます。ドライバーは今何をしようとしているか、ナビゲーターは気になるところや別解について積極的に話しながら作業を進めます。&lt;/p&gt;

&lt;p&gt;2人で1つの作業を行うので生産性が落ちるという欠点がありますが、それ以上に&lt;strong&gt;綺麗なコードが書ける&lt;/strong&gt;・&lt;strong&gt;互いの知識を共有できる&lt;/strong&gt;などの利点があります。特に上級者と初心者がペアを組んでプログラムを書くと、上級者のコードの書き方や&lt;a href=&quot;http://blog.shibayu36.org/entry/2013/01/19/202049&quot;&gt;開発環境&lt;/a&gt;を実際に見て学べる、リアルタイムに助言を受けられる、といった効率のよい学習を行うことができます。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;画面共有しよう&lt;/h3&gt;

&lt;p&gt;一緒にコードを書いていると「ちょっと貸して！」みたいな状況が多々あると思います。その度に席を入れ替えたり身を乗り出すのも面倒なので、2人のPCから1つの画面を操作できると便利です。Macはデフォルトで画面を共有する機能を搭載しているので、その使い方について説明します。以下、画面共有を受け入れる側をドライバーPC、申請する側をナビゲーターPCとします。&lt;/p&gt;

&lt;p&gt;まずはドライバーPCのシステム環境設定&amp;gt;共有を開きます。1.画面共有にチェックを入れ、2.コンピュータ設定を選択して、3.ほかのユーザが画面操作の権限を要求することを許可にチェックを入れます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/pair01.png&quot; class=&quot;image-on-frame-medium image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;次にナビゲーターPCでFinder&amp;gt;移動&amp;gt;サーバへ接続(ショートカットキー:⌘+K)を開き、ドライバーPCに表示されているvnc://(IPアドレス)を入力します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/pair02.png&quot; class=&quot;image-on-frame-medium image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;画面操作の権限に関する選択画面が現れるので、アクセス権を要求を選んで接続ボタンを押します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/pair03.png&quot; class=&quot;image-on-frame-medium image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;するとドライバーPCに要求を許可するか確認画面が現れるので画面を共有をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/pair04.png&quot; class=&quot;image-on-frame-medium image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上の設定が完了するとドライバーPCの画面が表示され、ナビゲーターのカーソル移動・キーボード入力を受け入れるようになります。早速ペアプログラミングを開始しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/pair05.png&quot; class=&quot;image-on-frame-medium image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;なお、Macの画面共有を使用するには2つのPCが同じネットワークに接続されている必要があります。離れた環境で画面を共有する場合は&lt;a href=&quot;https://screenhero.com/&quot;&gt;Screenhero&lt;/a&gt;・&lt;a href=&quot;http://www.teamviewer.com/ja/&quot;&gt;TeamViewer&lt;/a&gt;・&lt;a href=&quot;https://plus.google.com/hangouts&quot;&gt;Googleハングアウト&lt;/a&gt;のリモートデスクトップ機能を使うことをおすすめします。アカウント作成やソフトウェアのインストールが不要で簡単という理由で、今回は画面共有を紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.adventar.org/calendars/607&quot;&gt;LiT!関西 Advent Calendar 2014&lt;/a&gt;次回はほっしゃん(&lt;a href=&quot;https://twitter.com/Recursible&quot;&gt;@Recursible&lt;/a&gt;)がAndroidのioschedライブラリの解析に関する記事を書いてくれます。お楽しみに！&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Dec 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/pair-programming/</link>
        <guid isPermaLink="true">http://shoya.io/blog/pair-programming/</guid>
        
        <category>Infrastructure</category>
        
        
        <category>server</category>
        
      </item>
    
      <item>
        <title>白龍園観覧</title>
        <description>&lt;p&gt;&lt;cite&gt;&lt;a href=&quot;http://memo.sanographix.net/post/103115828845&quot;&gt;1日100人限定・君は京都の激レアスポット「白龍園」を見たか - MEMOGRAPHIX&lt;/a&gt;&lt;/cite&gt; の写真があまりにも美しくて居てもたってもいられなくなったので京都の白龍園に行ってきた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/hakuryu01.JPG&quot; class=&quot;image-on-frame image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;白龍園は子供服メーカーの青野株式会社によって所有・手入れされている庭園。今まで外部の人は入れなかったのだけれど、2012年秋から春と秋のみ・人数制限ありで一般公開されるようになった。観覧券は叡山電鉄出町柳駅にて09:00から購入できるが1日100人の枠が埋まると販売が終わってしまう。&lt;cite&gt;&lt;a href=&quot;http://guide.travel.co.jp/article/2244/&quot;&gt;１日１００人限定！誰も知らない京都の紅葉穴場！～洛北・白龍園 - たびねす&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;11/23(日)に行ったのだけれど、三連休の真ん中だからすぐに売り切れるだろうとかなり余裕を持って07:30に出町柳駅に着くと、既に30人ほどの列ができていた。観覧券を購入した後は09:15発の電車に乗って二ノ瀬駅で降り、10:00の開園で入園した。電車は二ノ瀬駅に着く直前で「もみじのトンネル」を抜けるので道中も美しい景色を見ることができる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/hakuryu03.JPG&quot; class=&quot;image-on-frame image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;園内に入って最初に目にするのは、まるで絨毯のような美しい苔。1日の入場者を制限して丁寧に管理されているので、通路や階段などいたるところで茂っている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/hakuryu04.JPG&quot; class=&quot;image-on-frame image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;苔で覆われた石畳を進むと奥の方に神社があり、鳥居をくぐったあたりからは雰囲気が変わって高い木に覆われたところになる。細い道なのだけれど人が少ないので落ち着いて歩くことができた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/hakuryu02.JPG&quot; class=&quot;image-on-frame image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;庭園には腰を据えて景色を楽しめる東屋(あずまや)がある。写真は入口に近いところにある「彩雲亭」から見える景色で、窓によって切りだされた紅葉が非常に綺麗。特に日が差したタイミングに見ると窓の外の木々が色鮮やかに光るので、座ってしばらく眺めているのがおすすめ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/hakuryu05.JPG&quot; class=&quot;image-on-frame image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;高台にある「福寿園」という東屋からは山々の紅葉が見渡せる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/hakuryu06.JPG&quot; class=&quot;image-on-frame image-fade&quot; /&gt;&lt;/p&gt;

&lt;p&gt;滞在時間はゆっくり2巡して90分ほど。春にまた一般公開されるかもしれないので、今度は桜の咲く頃に来れたらいいなぁ。何度も足を運びたくなる美しい庭園でした。&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Nov 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/hakuryuen/</link>
        <guid isPermaLink="true">http://shoya.io/blog/hakuryuen/</guid>
        
        <category>Sightseeing</category>
        
        
        <category>coffee</category>
        
      </item>
    
      <item>
        <title>Sublime Text3でLaTeXをコンパイルする[Mac]</title>
        <description>&lt;p&gt;Sublime Textにはcommand+bでコードを実行する機能(Build System)がある。今回はビルドできるファイルにLaTeXを加えてみた。Sublime TextでLaTeXを扱う方法、調べたらLaTeXToolsとかを入れていろいろ頑張る方法が出てくるのだけれど、既にMacTeXの環境(ターミナルからplatexコマンドなどが使える状態)があるのならもっと簡単に構築できると思う。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/sublime_latex_01.png&quot; class=&quot;image-on-frame-small&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;手順&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tools&amp;gt;Build System&amp;gt;New Build System…(上図参照)を選択してBuild Systemを作成する。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新規ファイルが開かれるので、下記の設定を記入して保存する。ファイル名がメニューバーに表示されるBuild Systemの名前になる。保存場所はデフォルトで ~/Library/Application Support/Sublime Text 3/Packages/User になる。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/texbin/platex $file_base_name.tex &amp;amp;&amp;amp; /usr/texbin/pbibtex $file_base_name.aux &amp;amp;&amp;amp; /usr/texbin/platex $file_base_name.tex &amp;amp;&amp;amp; /usr/texbin/dvipdfmx -p a4 $file_base_name.dvi &amp;amp;&amp;amp; /usr/bin/open $file_base_name.pdf&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;selector&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;source.tex&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;補足&lt;/h3&gt;

&lt;p&gt;LaTeXからPDFを作成するには、複数回のコンパイルが必要になる。標準で提供されている仕組みではBuild Systemに複数のコマンドを登録することができないので、上記のような黒魔術を使用する。Macの場合は”shell”をfalseに、”cmd”にshとその引数として実行したいコマンドを&amp;amp;&amp;amp;で続けていけばうまく動作するらしい。Windowsの場合は書き方がやや異なる。&lt;cite&gt;&lt;a href=&quot;http://blog.pcitron.fr/2013/02/08/multiple-command-in-sublime-build-system/&quot;&gt;Multiple commands in Sublime Build System&lt;/a&gt;&lt;/cite&gt;を参考に設定した。&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Nov 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/sublime-latex/</link>
        <guid isPermaLink="true">http://shoya.io/blog/sublime-latex/</guid>
        
        <category>Infrastructure</category>
        
        
        <category>server</category>
        
      </item>
    
      <item>
        <title>なんで科学者を目指すようになったか</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/towards_a_scientist_01.jpg&quot; class=&quot;image-on-frame-mini&quot; /&gt;&lt;/p&gt;

&lt;p&gt;幼い頃から「科学」が好きな子供だった。近所の大学が大学祭で&lt;strong&gt;科学体験フェスティバル&lt;/strong&gt;を開催していて、毎年欠かさず参加した。特に鉱物の展示がお気に入りだったので、参加賞の水晶などを集めながら、物心ついた頃は石博士になりたいと思っていた。うちの小学校の卒業式には卒業証書を受け取る際に将来の夢を大声で言うみたいなイベントがあって、「科学者になって世界中の人を幸せにする」と言ったのを覚えている。&lt;/p&gt;

&lt;p&gt;それから中学・高校と理科の授業を受ける中で、興味の対象は物理学・化学・生物学の広く深い方向に伸びていった。高校生の頃に&lt;strong&gt;国際生物学オリンピック&lt;/strong&gt;の日本代表を決める選考会に出たことがあって、惜しいところまでいった。(余談だけどサマーウォーズの「あと少しで日本代表になれたのに。」というセリフは聞く度に心に刺さるものがある。)そこで競った同期がとにかく賢く変わり者揃いだった。懇親会のときにひとりが「俺、東大に行こうと思う。」とつぶやいて、僕も私もといった具合に皆が声をあげた。ものすごく盛り上がり、「大学でまた会おう。」と言い合った。たぶん皆そういった刺激を与え合う相手に飢えていたのだと思う。研究の道に進むなら面白い人がたくさんいる環境で過ごしたい思い、僕も&lt;a href=&quot;/blog/imabari/&quot;&gt;難関校を目指すことを強く決めた&lt;/a&gt;。結果、最初に発言した彼は東大に合格し、僕は阪大を受けるが落ちて府大に進学することになった。&lt;/p&gt;

&lt;p&gt;阪大には基礎工学部という工学と理学を織り交ぜた研究をしているところがある。僕の幅広い興味や視野と合うと思ったのが、進路に阪大を選んだ理由だった。入学したら&lt;strong&gt;脳科学&lt;/strong&gt;の研究をしようと思っていた。第2希望の府大のことはよく知らなかったので、名前をみて知能情報工学科を受験した。脳と能の漢字違いで学部を選んだことを、僕は入学してから知ることになる。&lt;/p&gt;

&lt;p&gt;勘違いで選んだ学部も運命で、僕はそのおかげで&lt;strong&gt;情報工学&lt;/strong&gt;に出会うことになる。プログラミング、あるいは企画やデザインまで含めたソフトウェア開発は、僕の適正にとてもマッチしていると思う。アイデアを形にして公開するまでのスピードは他分野のものづくりを圧倒するものがある。学部3年生の頃にその面白さに気付き、プログラミングを通じて&lt;a href=&quot;/development/&quot;&gt;いろんな(変な)ものを生み出して&lt;/a&gt;、楽しい経験を積むことができた。その結果、もっと情報工学を学びたいと考え、大学や学術分野を変えることなく大学院へ進学した。巡り巡って僕は現在の研究テーマを&lt;strong&gt;情報工学の視点から見た脳科学や認知的行動&lt;/strong&gt;に設定していて、今までの意思決定は間違っていなかったと確信してる。&lt;/p&gt;

&lt;p&gt;僕らの世代も就職活動が始まり、進学するか就職するか、いよいよ選択を先延ばしにできない時期になった。&lt;cite&gt;&lt;a href=&quot;http://memo.sanographix.net/post/69496511652&quot;&gt;なんでデザイナーになったか - MEMOGRAPHIX&lt;/a&gt;&lt;/cite&gt;に影響を受けて、科学者になる道を後押しする材料について書いてみたのでした。(開発者になる道を後押しする材料もたくさんあるので、また改めて書くことになると思う。)&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Nov 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/towards-a-scientist/</link>
        <guid isPermaLink="true">http://shoya.io/blog/towards-a-scientist/</guid>
        
        <category>Note</category>
        
        
        <category>coffee</category>
        
      </item>
    
      <item>
        <title>HomebrewでOz開発環境を整える[Mozart2][Emacs]</title>
        <description>&lt;p&gt;「コンピュータプログラミングの概念・技法・モデル」(ガウディ本)のサンプルコードを実行するためにOz言語の環境を整えた。Ozは開発環境であるMozartシステムやEmacsを必要とし、それらはウェブサイト上で無料で公開されているのだけれど、パッケージをダウンロードしてくるのが面倒なのですべてHomebrewで管理することにした。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# emacs&lt;/span&gt;
brew install emacs --japanese --cocoa --srgb --with-gnutls -v
brew linkapps

&lt;span class=&quot;c&quot;&gt;# homebrew-cask&lt;/span&gt;
brew tap caskroom/homebrew-cask
brew install brew-cask

&lt;span class=&quot;c&quot;&gt;# mozart&lt;/span&gt;
brew tap caskroom/homebrew-versions
brew install mozart2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;補足&lt;/h3&gt;

&lt;p&gt;Emacsについてはインストール方法やパッチが様々のようなので、&lt;cite&gt;&lt;a href=&quot;http://www.sevencredit.com/2014/07/02/580/&quot;&gt;Macで本家EmacsとHomebrew IMEパッチ版とEmacs Mac PortとAquamacsを比べてみる。 - たったのセブンクレジット&lt;/a&gt;を参考にさせていただきインストールオプションを上記に選んだ。&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;homebrew-versionsに送ったpull requestが無事にmergeされたのでcaskroom/homebrew-caskをtapすることでmozart2.0.0がインストールできるようになった。(本家のhomebrew-caskでインストールできるMozartは安定版の1.4.0)&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2014.12.04 追記&lt;/h3&gt;

&lt;p&gt;mozart2がhomebrew-caskではなくhomevrewで管理されるようになったので現在は以下のコマンドでインストールできます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install emacs --japanese --cocoa --srgb --with-gnutls -v
brew install mozart2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;動作確認&lt;/h3&gt;

&lt;p&gt;Mozart2.appを起動して2フレームのEmacsが起動すればOKです。&lt;/p&gt;

&lt;div class=&quot;babylink-box&quot; style=&quot;overflow: hidden; font-size: small; zoom: 1; margin: 15px 0; text-align: left;&quot;&gt;&lt;div class=&quot;babylink-image&quot; style=&quot;float: left; margin: 0px 15px 10px 0px; width: 75px; height: 75px; text-align: center;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798113468/mrk1869-22/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;img style=&quot;border-top: medium none; border-right: medium none; border-bottom: medium none; border-left: medium none;&quot; src=&quot;http://ecx.images-amazon.com/images/I/51iXhiKTamL._SL75_.jpg&quot; width=&quot;59&quot; height=&quot;75&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;babylink-info&quot; style=&quot;overflow: hidden; zoom: 1; line-height: 120%;&quot;&gt;&lt;div class=&quot;babylink-title&quot; style=&quot;margin-bottom: 2px; line-height: 120%;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798113468/mrk1869-22/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;コンピュータプログラミングの概念・技法・モデル(IT Architect&#39; Archiveクラシックモダン・コンピューティング6) (IT Architects’Archive CLASSIC MODER)&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;babylink-manufacturer&quot; style=&quot;margin-bottom: 5px;&quot;&gt;セイフ・ハリディ, ピーター・ヴァン・ロイ, Peter Van-Roy, Seif Haridi&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 12 Nov 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/brew-mozart/</link>
        <guid isPermaLink="true">http://shoya.io/blog/brew-mozart/</guid>
        
        <category>Infrastructure</category>
        
        
        <category>server</category>
        
      </item>
    
      <item>
        <title>Sublime Text3の画面をctrl+sp,vsで分割する[Mac]</title>
        <description>&lt;p&gt;Sublimeの慣れないキーバインドに、「shift+option+command+数字」で画面を上下分割、「option+command+数字」で画面を左右分割にするものがある。Vimを使っていた名残でこれらの機能をsp(split)とvs(vsplit)に割り当てたいと思ったので、キーバインドを変更することにした。&lt;/p&gt;

&lt;p&gt;デフォルトのキーバインドを変更するには、
1.「Key Bindings - Default」から対象のキーバインドを見つける。
2.「Key Bindings - User」にコピーしてキーの部分を書き換える。
の手順を踏めばいい。commandはsuper, controlはctrlと書く。&lt;/p&gt;

&lt;p&gt;今回は「Key Bindings - User」に以下の設定を記入した。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set_layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;cols&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;cells&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set_layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;cols&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;cells&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ctrl+s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set_layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;cols&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;cells&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;この設定で「control+v, control+s」で画面を左右分割、「control+s, control+p」で画面を上下分割、「control+s, control+s」で1画面に戻せる。3, 4つに分割する機会は少ないので今のところはそれぞれ2分割まで。現在の状態からさらに縦横に分割していくにはどうしたらいいんだろう…&lt;/p&gt;

&lt;p&gt;もっと良い方法をご存じの方はぜひ教えてください。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/sublime-split/</link>
        <guid isPermaLink="true">http://shoya.io/blog/sublime-split/</guid>
        
        <category>Infrastructure</category>
        
        
        <category>server</category>
        
      </item>
    
      <item>
        <title>Sublime Text3の設定をGit+Dropboxで安全に同期する</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://shoya.io/blog/hello-sublime/&quot;&gt;Sublime Text3導入メモ&lt;/a&gt;で設定ファイルをDropboxで同期する方法を書いたのだけれど、意図しないタイミングで設定が同期されてコンフリクトが頻繁に発生するので、設定をGitで管理することにした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/12208857/img/sublime_sync.png&quot; class=&quot;image-on-frame-small&quot; /&gt;&lt;/p&gt;

&lt;p&gt;設定ファイルにはアクセスキーなども含まれており、変更履歴を外部に公開するのはよくない。そこで今回はDropbox上にリモートリポジトリを作成する。同期をGitとDropboxの2段階にすることで「&lt;strong&gt;過去の状態に戻しやすくなる&lt;/strong&gt;」「&lt;strong&gt;任意のタイミングで同期できる&lt;/strong&gt;」というメリットがある。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1台目の手順&lt;/h3&gt;

&lt;p&gt;まずはDropbox上にリモートリポジトリを作成する。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir -p ~/Dropbox/Git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Dropbox/Git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init —bare sublime.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;次にSublimeの設定フォルダへ移動してgit initを実行。ignoreするファイルは&lt;cite&gt;&lt;a href=&quot;https://sublime.wbond.net/docs/syncing&quot;&gt;Syncing - Package Control&lt;/a&gt;&lt;/cite&gt;を参考にした。Dropboxのシンボリックリンクにしている場合は元に戻してから行うこと。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/Sublime&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Text&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;3/Packages/User
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;subl .gitignore &lt;span class=&quot;c&quot;&gt;# 下記のファイルを.gitignoreに書く&lt;/span&gt;
	Package&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Control.last-run
	Package&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Control.ca-list
	Package&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Control.ca-bundle
	Package&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Control.system-ca-bundle
	Package&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Control.cache/
	Package&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Control.ca-certs/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add origin ~/Dropbox/Git/sublime.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2台目の手順&lt;/h3&gt;

&lt;p&gt;既存の設定フォルダを削除してからgit clone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/Sublime&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Text&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;3/Packages
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -rf User
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone ~/Dropbox/Git/sublime.git User&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以後は変更の度にcommitして、push/pullで同期すれば良い。設定ファイルのありかを毎回タイプするのは面倒なので、自分は下記のエイリアスを作成している。.zshrcや.bashrcに書いておけばcd_sublime_userで楽に移動できる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cd_sublime_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 07 Nov 2014 00:00:00 +0900</pubDate>
        <link>http://shoya.io/blog/sublime-sync/</link>
        <guid isPermaLink="true">http://shoya.io/blog/sublime-sync/</guid>
        
        <category>Infrastructure</category>
        
        
        <category>coffee</category>
        
      </item>
    
  </channel>
</rss>
